const port = chrome.runtime.connect({ name: 'YAKKL_PORT' });

// Listen for messages from the background script
port.onMessage.addListener((message) => {
  if (message.type === 'YAKKL_ACCOUNTS_CHANGED') {
    window.postMessage({ type: 'YAKKL_ACCOUNTS_CHANGED', accounts: message.accounts }, '*');
  }
});

window.addEventListener('message', (event) => {
  if (event.source !== window) return;

  if (event.data.type === 'YAKKL_REQUEST') {
    port.postMessage({
      id: event.data.id,
      type: 'YAKKL_REQUEST',
      method: event.data.method,
      params: event.data.params,
    });
  } else if (event.data.type === 'YAKKL_ACCOUNTS_CHANGED') {
    port.postMessage({ type: 'YAKKL_ACCOUNTS_CHANGED', accounts: event.data.accounts });
  }
});

// Above is example of using a port connection


// Below is an example for inpage.ts, content.ts, and background.ts
// For using sendMessage instead of a port and for account changes

class YakklWalletProvider extends EventEmitter {
  // ... existing code ...

  onAccountsChanged(accounts: string[]): void {
    this.emit('accountsChanged', accounts);
  }
}

// Also ... existing code ...

window.addEventListener('message', (event) => {
  if (event.source !== window || event.data.type !== 'YAKKL_ACCOUNTS_CHANGED') return;

  const { accounts } = event.data;
  ethereumProviderManager.currentProvider.onAccountsChanged(accounts);
});


// background.ts
// ... existing code ...

// Listen for account changes from the wallet and send a message to the content script
walletInstance.on('accountsChanged', (accounts: string[]) => {
  chrome.tabs.query({}, (tabs) => {
    tabs.forEach((tab) => {
      if (tab.id) {
        chrome.tabs.sendMessage(tab.id, { type: 'YAKKL_ACCOUNTS_CHANGED', accounts });
      }
    });
  });
});


// content.ts
// ... existing code ...

chrome.runtime.onMessage.addListener((message, sender) => {
  if (message.type === 'YAKKL_ACCOUNTS_CHANGED') {
    window.postMessage({ type: 'YAKKL_ACCOUNTS_CHANGED', accounts: message.accounts }, '*');
  }
});


// dapp
window.ethereum.on('accountsChanged', (accounts) => {
  console.log('Accounts changed:', accounts);
  // Update the dApp state with the new connected accounts
});
