// Import the events module (for Node.js)
const EventEmitter = require('events');

// YakklWalletProvider object with required methods, extending EventEmitter
class YakklWalletProvider extends EventEmitter {
  constructor() {
    super();
    this.isEnabled = false;
  }

  async enable() {
    this.isEnabled = true;
    // Add logic to enable the wallet and return the user's Ethereum addresses
    this.emit('connect');
    return ['0x12345...'];
  }

  // Implement other required methods here, such as sendTransaction, etc.
}

// Create a proxy object using Object.defineProperty
function createWalletProxy(walletInstance) {
  const walletProxy = {};

  Object.keys(walletInstance).forEach((key) => {
    Object.defineProperty(walletProxy, key, {
      get() {
        return walletInstance[key];
      },
      set(newValue) {
        walletInstance[key] = newValue;
      },
    });
  });

  return walletProxy;
}

// Call createWalletProxy and pass the instance of the YakklWalletProvider
const yakklWalletInstance = new YakklWalletProvider();
const yakklWalletProxy = createWalletProxy(yakklWalletInstance);

// Create a providers array and swap function
const providers = {
  metamask: window.ethereum,
  yakklWallet: yakklWalletProxy,
};

let currentProvider = 'yakklWallet';

function swapProvider(providerName) {
  if (!providers[providerName]) {
    console.error(`Provider "${providerName}" not found.`);
    return;
  }

  currentProvider = providerName;
  window.ethereum = providers[providerName];
}

// Inject the YakklWalletProvider into the web page
window.addEventListener('DOMContentLoaded', () => {
  swapProvider('yakklWallet');

  // Optional: Swap back to MetaMask by calling swapProvider('metamask')
});
