// Import the events module (for Node.js)
const EventEmitter = require('events');

// YakklWalletProvider object with required methods, extending EventEmitter
class YakklWalletProvider extends EventEmitter {
  constructor() {
    super();
    this.isEnabled = false;
  }

  async enable() {
    this.isEnabled = true;
    // Add logic to enable the wallet and return the user's Ethereum addresses
    this.emit('connect');
    return ['0x12345...'];
  }

  // Implement other required methods here, such as sendTransaction, etc.
}

class EthereumProviderManager {
  constructor() {
    this.providers = {
      metamask: window.ethereum,
      yakklWallet: new YakklWalletProvider(),
    };
    this.currentProvider = 'yakklWallet';
  }

  getProvider() {
    return this.providers[this.currentProvider];
  }

  swapProvider(providerName) {
    if (!this.providers[providerName]) {
      console.error(`Provider "${providerName}" not found.`);
      return;
    }
    this.currentProvider = providerName;
  }
}

const providerManager = new EthereumProviderManager();

// Usage example
(async () => {
  // Make sure to swap the provider before calling methods on it
  providerManager.swapProvider('yakklWallet');
  const accounts = await providerManager.getProvider().enable();
  console.log(accounts);

  // Optional: Swap back to MetaMask by calling swapProvider('metamask')
})();
