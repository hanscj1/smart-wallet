<script>
  import { browser as browserSvelte } from '$app/environment';
  // import { variables } from '../../variables';
  import { getYakklSettings, yakklMiscStore, getYakklProfile, setProfileStorage, setYakklSettings } from '$lib/storage/local/stores';
  import { yakklProfile as yakklProfileDefaults } from '$lib/models/dataModels';
  import { encryptData, digestMessage } from '$lib/plugins/common/encryption';
  // import { GoogleAuth } from '$lib/index';
  import { createForm } from "svelte-forms-lib";
  import * as yup from 'yup';
  import zxcvbn from "zxcvbn";
  import { goto } from '$app/navigation';
  import { Button, Modal, Popover } from 'flowbite-svelte';
  import { PATH_ACCOUNTS_ETHEREUM_CREATE_PRIMARY, PATH_IMPORT_RECOVERY, PATH_WELCOME } from '$lib/plugins/common/constants';
  import { setProvider } from '../../provider/+server';

  // import {Buffer} from 'buffer';
  // const buf = Buffer.alloc(10);
  // const buf = Buffer.from([1,2,3]);

  let yakklProfile;
  let error = false;
  let errorValue;   

  if (browserSvelte) {
      window.addEventListener("message", (event) => {
          // console.log(event);
      });
  }

  async function checkRegistration() {
      if (browserSvelte) {
          try {
              await getYakklSettings().then((settings) => {
                  if (settings.init === true) {
                      throw "Your account has already been initialized. Going forward will RESET your account by wiping out your secret phrase and addresses (balances remain the same). Are you sure you wish to continue?";
                  }
              });                
          } catch (e) {
              error = true;
              errorValue = e;
          }
      }
  }

  function handleClose(e) {
      goto(PATH_WELCOME);
  }

  checkRegistration();

  // $: console.log($yakklMiscStore);

  async function register(userName, password, accountName) {
    try {
      if (browserSvelte) {
          await getYakklProfile().then((value) => {
              yakklProfile = value;

              // If the data is encrypted and no account information exists then reset profile to default and start the process over...
              if (!yakklProfile.name) {
                  yakklProfile = yakklProfileDefaults;
                  // TBD - Log this activity change because it is setting back to default
              }

              yakklProfile.userName = userName;
              
              digestMessage(userName+password).then(digest => {
                  $yakklMiscStore = digest;
                  yakklProfile.id = crypto.randomUUID();
                  yakklProfile.digest = digest;
                  yakklProfile.meta = {'password': password, 'accountName': accountName};
                  yakklProfile.createDate = new Date().toISOString();
                  yakklProfile.updateDate = yakklProfile.createDate;

                  encryptData(yakklProfile, digest).then(result => {
                      yakklProfile = result;

                      if (yakklProfile) {
                          setProfileStorage(yakklProfile).then(async () => {
                              let settings = await getYakklSettings();
                              settings.lastAccessDate = new Date().toISOString();
                              settings.id = yakklProfile.id;
                              settings.userName = yakklProfile.userName;
                              settings.updateDate = new Date().toISOString();
                              await setYakklSettings(settings);

                              setProvider();

                              goto(PATH_ACCOUNTS_ETHEREUM_CREATE_PRIMARY);

                              // TBD - Log this activity change
                              return;
                          });
                      }
                  });
              });
          });
      }
    } catch (e) {
      error = true;
      // TBD! - Cause encrypt, decrypt, digest to all fail. Make sure no critical data is leaking through
      let er = (!$yakklMiscStore? String(e) : String(e).replace($yakklMiscStore, "REDACTED"));
      errorValue = `Following error occurred: ${er}`;
      console.log(errorValue);
    }
  }

  const { form, errors, state, isValid, handleChange, handleSubmit } = createForm({
      initialValues: { userName: "", password: "", confirmPassword: "", accountName: "" },
      validationSchema: yup.object().shape({
          userName: yup
              .string()                // .min(6, "Must be at least 6 characters")
              .lowercase()
              .required('Please enter your username (used in encryption) - min of 6 characters')
              .matches(/^[a-z0-9]{6,}$/, "Must be lowercase and at least 6 characters"),
          password: yup
              .string()
              .required('Please enter your password. It must be at least 8 characters')
              .matches(/^(?=.*[A-Za-z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/, "Must Contain at least 8 Characters, One Uppercase, One Lowercase, One Number and one special case Character"),
          confirmPassword: yup.string()
              .oneOf([yup.ref('password'), null], 'Passwords must match'),
          accountName: yup
              .string()
              .trim()                
              .default('Top Level Account')
              .required('Please enter your initial Crypto Currentcy account name - min of 3 characters')
              .matches(/^[A-Za-z0-9#@!*&_.() ]{3,}$/, "Can be uppercase, lowercase, numeric, and a few special characters"),
      }),
      onSubmit: data => {
          try {
            register(data.userName.toLowerCase(), data.password, (data.accountName.trim() ? data.accountName : 'Top Level Account')).then();
          } catch (e) {
              error = true;
              let er = (!password || !confirmPassword ? String(e) : String(e).replace(password, "REDACTED").replace(confirmPassword, "REDACTED"));
              errorValue = `Following error occurred: ${er}`;
              console.log(errorValue);
          }
      }
  });

  $: strength = zxcvbn($form.password).score;

  function toggleVisability() {
      let x = document.getElementById("password");
      if (x.type === "password") {
          x.type = "text";
      } else {
          x.type = "password";
      }
  }

  // Pull from the env...
  // let google_client_id = variables.clientIdGoogle;
  // let google_redirect_uri = "http://localhost:3000/login"
  // let google_scope = "https://www.googleapis.com/auth/userinfo.email https://www.googleapis.com/auth/userinfo.profile openid"

  function handleGOTO() {
      goto(PATH_IMPORT_RECOVERY);
  }

</script>  

<Modal id="warning" bind:open={error}>
  <div class="text-center">
      <svg aria-hidden="true" class="mx-auto mb-4 w-14 h-14 text-gray-400 dark:text-gray-200" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
      <h3 class="mb-5 text-lg font-normal text-gray-500 dark:text-gray-400"><span class="font-bold text-red-600">WARNING - </span>{errorValue}</h3>
      <Button color='red'>Yes, I'm sure</Button>
      <Button on:click={handleClose} color='alternative'>No, cancel</Button>
  </div>
</Modal>

<Popover class="text-sm" triggeredBy="#pwd-help" placement="top">
  <h3 class="font-semibold text-gray-900 dark:text-white">Must have at least 8 characters</h3>
  <div class="grid grid-cols-4 gap-2">
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
  </div>
  <p class="py-2">It’s better to have:</p>
  <ul>
      <li class="flex items-center mb-1">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mr-2 w-4 h-4 text-green-400 dark:text-green-500"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
Upper &amp; lower case letters 
      </li>
      <li class="flex items-center mb-1">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mr-2 w-4 h-4 text-green-400 dark:text-gray-400"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
          A symbol (#$&amp;!) 
      </li>
      <li class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mr-2 w-4 h-4 text-green-400 dark:text-gray-400"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
          A longer password is best (12+ characters)
      </li>
  </ul>
</Popover>

<Popover class="text-sm" triggeredBy="#con-help" placement="top">
  <h3 class="font-semibold text-gray-900 dark:text-white">Must match password</h3>
  <div class="grid grid-cols-4 gap-2">
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
  </div>
  <p class="py-2">It’s better to have:</p>
  <ul>
      <li class="flex items-center mb-1">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mr-2 w-4 h-4 text-green-400 dark:text-green-500"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
Upper &amp; lower case letters 
      </li>
      <li class="flex items-center mb-1">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mr-2 w-4 h-4 text-green-400 dark:text-gray-400"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
          A symbol (#$&amp;!) 
      </li>
      <li class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mr-2 w-4 h-4 text-green-400 dark:text-gray-400"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
          A longer password is best (12+ characters)
      </li>
  </ul>
</Popover>

<Popover class="text-sm" triggeredBy="#nam-help" placement="top">
  <h3 class="font-semibold text-gray-900 dark:text-white">Must have at least 6 lowercase alphanumeric characters</h3>
  <div class="grid grid-cols-4 gap-2">
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
  </div>
  <p class="py-2">It's used for:</p>
  <ul>
      <li class="flex items-center mb-1">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mr-2 w-4 h-4 text-green-400 dark:text-green-500"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
          Encryption
      </li>
      <li class="flex items-center mb-1">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mr-2 w-4 h-4 text-gray-300 dark:text-gray-400"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
          Additional security
      </li>
      <li class="flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mr-2 w-4 h-4 text-gray-300 dark:text-gray-400"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
          Enhanced options (soon)
      </li>
  </ul>
</Popover>

<Popover class="text-sm" triggeredBy="#act-help" placement="top">
  <h3 class="font-semibold text-gray-900 dark:text-white">Must be alphanumeric or !@# _&*().</h3>
  <div class="grid grid-cols-4 gap-2">
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
      <div class="h-1 bg-orange-300 dark:bg-orange-400"></div>
  </div>
  <p class="py-2">It's used for:</p>
  <ul>
      <li class="flex items-center mb-1">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="mr-2 w-4 h-4 text-green-400 dark:text-green-500"><path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" /></svg>
          Naming your top level Crypto Account (spaces are allowed)
      </li>
  </ul>
</Popover>

<div class="relative m-1 ml-2 mr-2 bg-gradient-to-b from-indigo-700 to-indigo-500/15 dark:bg-gray-900 rounded-t-xl overflow-hidden">
  <!--max-w-7xl-->
  <main class="mt-1 mx-auto w-full text-center">
      <h1 class="text-xl tracking-tight font-extrabold text-gray-900 dark:text-white">
          <span class=" text-gray-300 3xl:inline">WELCOME</span>
          <br>
          <span class="text-gray-300 lg:inline">#1 YAKKL™ Smart Wallet</span>
          <!-- <span class="block text-primary-600 xl:inline">Cross-Chain</span> -->
      </h1>
      <!-- max-w-md-->
      <p class="mt-1 mx-auto text-base text-gray-300 dark:text-white">
          A smart wallet that works as you would expect
      </p>
      <p class="mx-auto text-base text-gray-300 dark:text-white">
          Simple, Secure, Fast, and Powerful
      </p>
      <hr class="mb-2 mt-2">
      <div class="w-full">
          <span class="text-gray-300 mb-2 text-md uppercase font-extrabold">[Registration is for data encryption! Required]</span>
          <form class="w-full px-5" on:submit|preventDefault={handleSubmit}>
              <div class="my-1">
                  <div class="flex flex-row mt-2">
                      <input
                          id="userName"
                          class="placeholder:italic block w-full px-4 md:py-2 py-1 text-lg font-normal text-gray-700 bg-gray-100 bg-clip-padding border border-solid border-gray-300 rounded-md transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                          placeholder="Username"
                          autocomplete="off"
                          bind:value="{$form.userName}"
                          on:change="{handleChange}"
                          required
                      />
                      <svg id="nam-help" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" class="w-6 h-6 ml-1 mt-2 fill-gray-300">
                          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clip-rule="evenodd" />
                      </svg>
                  </div>
                  {#if $errors.userName}
                  <small class="text-red-600 font-bold animate-pulse">{$errors.userName}</small>
                  {/if}
                  <div class="flex flex-row mt-2">
                      <input
                          id="password"
                          type="password"
                          class="placeholder:italic block w-full px-4 md:py-2 py-1 mt-2 text-lg font-normal text-gray-700 bg-gray-100 bg-clip-padding border border-solid border-gray-300 rounded-md transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                          placeholder="Password"
                          autocomplete="off"
                          bind:value="{$form.password}"
                          on:change="{handleChange}"
                          required
                      />
                      <svg id="pwd-help" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" class="w-6 h-6 ml-1 mt-4 fill-gray-300">
                          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clip-rule="evenodd" />
                      </svg>
                  </div>
                  <div class="w-[93%] bg-gray-200 rounded-full my-1 mt-1">
                      {#if strength < 3}
                      <div class="bg-red-600 h-1.75 mt-1 text-2xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-l-full" style="width: 33%">Weak</div>
                      {/if}
                      {#if strength === 3}
                      <div class="bg-yellow-400 h-1.75 mt-1 text-2xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-l-full" style="width: 66%">Average</div>
                      {/if}
                      {#if strength > 3}
                      <div class="bg-green-500 h-1.75 mt-1 text-2xs font-medium text-blue-100 text-center p-0.5 leading-none rounded-full" style="width: 100%">Strong</div>
                      {/if}
                  </div>
                  <div class="w-full text-center mt-2">
                      <span class="text-gray-300 text-sm font-bold">Weak password or anything less than 8 characters will not be allowed!</span>
                  </div>
                  <div class="flex ml-1 mt-2">
                      <div class="form-check">
                          <input id="seePassword" on:click="{toggleVisability}" class="form-check-input appearance-none h-4 w-4 border border-gray-300 rounded-sm bg-white checked:bg-blue-600 checked:border-blue-600 focus:outline-none transition duration-200 mt-1 align-top bg-no-repeat bg-center bg-contain float-left mr-2 cursor-pointer" type="checkbox" value="">
                          <label class="form-check-label text-sm inline-block text-gray-300 dark:text-white" for="seePassword">
                          Show Password
                          </label>
                      </div>
                  </div>
                  <div class="mt-4">
                      <div class="flex flex-row">
                          <input
                              id="confirmPassword"
                              type="password"
                              class="placeholder:italic block w-full px-4 md:py-2 py-1 text-lg font-normal text-gray-700 bg-gray-100 bg-clip-padding border border-solid border-gray-300 rounded-md transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                              placeholder="Confirm Password"
                              autocomplete="off"
                              bind:value="{$form.confirmPassword}"
                              on:change="{handleChange}"
                              required
                          />
                          <svg id="con-help" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" class="w-6 h-6 relative ml-1 mt-2 fill-gray-200">
                              <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clip-rule="evenodd" />
                          </svg>
                      </div>
                      {#if $errors.confirmPassword}
                      <small class="text-red-600 font-bold animate-pulse">{$errors.confirmPassword}</small>
                      {/if}
                  </div>
                  <div class="flex flex-row mt-2">
                      <input
                          id="accountName"
                          class="placeholder:italic block w-full mt-2 px-4 md:py-2 py-1 text-lg font-normal text-gray-700 bg-gray-100 bg-clip-padding border border-solid border-gray-300 rounded-md transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none"
                          placeholder="Account Name"
                          autocomplete="off"
                          bind:value="{$form.accountName}"
                          on:change="{handleChange}"
                          required
                      />
                      <svg id="act-help" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" class="w-6 h-6 relative ml-1 mt-4 fill-gray-200">
                          <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a.75.75 0 000 1.5h.253a.25.25 0 01.244.304l-.459 2.066A1.75 1.75 0 0010.747 15H11a.75.75 0 000-1.5h-.253a.25.25 0 01-.244-.304l.459-2.066A1.75 1.75 0 009.253 9H9z" clip-rule="evenodd" />
                      </svg>
                  </div>
                  {#if $errors.accountName}
                  <small class="text-red-600 font-bold animate-pulse">{$errors.accountName}</small>
                  {/if}
              </div>
              <div class="mt-4">
                  <button
                      type="submit"
                      class="inline-block h-10 px-7 md:py-3 py-2 mt-.5 bg-indigo-800 text-gray-300 font-bold text-large leading-snug uppercase rounded-md shadow-md hover:bg-indigo-700 hover:shadow-md focus:bg-indogo-700 focus:shadow-md focus:outline-none focus:ring-0 active:bg-indigo-800 active:shadow-md transition duration-150 ease-in-out w-full"
                      data-mdb-ripple="true"
                      data-mdb-ripple-color="light">
                      <div class="inline-flex items-center align-middle">
                          <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                              <path stroke-linecap="round" stroke-linejoin="round" d="M8 11V7a4 4 0 118 0m-4 8v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2z" />
                          </svg>
                          <span>Register</span>
                      </div>
                  </button>
              </div>
          </form>
      </div>
      <p class="w-full items-center justify-center mt-2 px-4 text-md text-gray-200 font-semibold">OR</p>
      <!-- svelte-ignore a11y-click-events-have-key-events -->
      <div role="button" on:click="{handleGOTO}" class="text-gray-200 font-extrabold text-md uppercase underline">Click to import using secret recovery phrase</div>
  </main>
</div>
